[color]
	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
	ui = auto
[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green
[color "diff"]
	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions
[color "status"]
	added = yellow
	changed = green
	untracked = cyan
[alias]
  # add
  a = add                           # add
  chunkyadd = add --patch           # stage commits chunk by chunk
  # via http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
  snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
  snapshots = !git stash list --grep snapshot
  #via http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
  recent-branches = !git for-each-ref --count=15 --sort=-committerdate refs/heads/ --format='%(refname:short)'
  # branch
  b = branch -v                     # branch (verbose)
  # commit
  c = commit -m                     # commit with message
  ca = commit -am                   # commit all with message
  amend = commit --amend            # ammend your last commit
  ammend = commit --amend           # ammend your last commit
  # checkout
  co = checkout                     # checkout
  nb = checkout -b                  # create and switch to a new branch (mnemonic: "git new branch branchname...")
  # cherry-pick
  cp = cherry-pick -x               # grab a change from a branch
  # diff
  d = diff                          # diff unstaged changes
  dc = diff --cached                # diff staged changes
  last = diff HEAD^                 # diff last committed change
  # log
  l = log --graph --date=short
  changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
  short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
  simple = log --pretty=format:\" * %s\"
  shortnocolor = log --pretty=format:\"%h %cr %cn %s\"
  # pull
  pl = pull                         # pull
  # push
  ps = push                         # push
  # rebase
  rc = rebase --continue            # continue rebase
  rs = rebase --skip                # skip rebase
  # remote
  r = remote -v                     # show remotes (verbose)
  # reset
  unstage = reset HEAD              # remove files from index (tracking)
  uncommit = reset --soft HEAD^     # go back before last commit, with files in uncommitted state
  filelog = log -u                  # show changes to a file
  mt = mergetool                    # fire up the merge tool
  # stash
  ss = stash                        # stash changes
  sl = stash list                   # list stashes
  sa = stash apply                  # apply stash (restore changes)
  sd = stash drop                   # drop stashes (destory changes)
  # status
  s = status                        # status
  st = status                       # status
  stat = status                     # status
  # tag
  t = tag -n                        # show tags with <n> lines of each tag message
	# List contributors with number of commits
	contributors = shortlog --summary --numbered
	# Merge GitHub pull request on top of the current branch or,
	# if a branch name is specified, on top of the specified branch
	mpr = "!f() { \
		declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
		declare branch=\"${2:-$currentBranch}\"; \
		if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
			git fetch origin refs/pull/$1/head:pr/$1 && \
			git checkout -B $branch && \
			git rebase $branch pr/$1 && \
			git checkout -B $branch && \
			git merge pr/$1 && \
			git branch -D pr/$1 && \
			git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
		fi \
	}; f"
[apply]
  whitespace = nowarn
[help]
	# Automatically correct and execute mistyped commands
	autocorrect = 1
[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true
[format]
  pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset
[core]
	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
# URL shorthands
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
	insteadOf = "github:"
[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
	insteadOf = "gist:"
